{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import urllib3\n",
    "import os \n",
    "import re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A few browser functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def url_output(primary_url):\n",
    "    http = urllib3.PoolManager()\n",
    "    r = http.request('GET', primary_url)\n",
    "    out = str(r.data)\n",
    "    r.release_conn()\n",
    "    return out\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def link_grabber(out):\n",
    "    start_link_list = [m.start() for m in re.finditer('<a href=', out)]\n",
    "    ## +10 skips the first double quote so we can find end of link, not the best way of doing this\n",
    "    end_link_list = [(start_link_list[i]+out[start_link_list[i]+10:].find('\"')+10) for i,link in enumerate(start_link_list)]\n",
    "    if len(start_link_list) == len(end_link_list):\n",
    "        list_of_links = list(zip(start_link_list,end_link_list))\n",
    "        ## +9 makes start point = https\n",
    "        links = [out[link[0]+9:link[1]] for link in list_of_links]\n",
    "    return links"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def links_of_interest(links,values):\n",
    "    links = [link for link in links if any(value in link for value in values)]\n",
    "    links = list(set(links))\n",
    "    return links"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For each pdf, download and export"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def pdf_grabber(url,path):\n",
    "    http = urllib3.PoolManager()\n",
    "    r = http.request('GET', url, preload_content=False)\n",
    "    document_name = url[url.rfind('/')+1:]\n",
    "    if document_name not in os.listdir(path):\n",
    "        with open(path+document_name, 'wb') as out:\n",
    "            while True:\n",
    "                data = r.read(100)\n",
    "                if not data:\n",
    "                    break\n",
    "                out.write(data)\n",
    "    r.release_conn()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summary Report URLs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "path = '/Users/thudson/Documents/Invisible Institute/pdfs/'\n",
    "primary_url = 'http://www.iprachicago.org/news-publications/case-reports/summary-reports/'\n",
    "out = url_output(primary_url)\n",
    "links = link_grabber(out)\n",
    "year_values = ['2016-summary-reports','2015-summary-reports','2014-summary-reports','2013-summary-reports',\n",
    "               '2012-summary-reports','2011-summary-reports','2010-summary-reports','2009-summary-reports']\n",
    "links = links_of_interest(links,year_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summary Report PDFs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for link in links:\n",
    "    html1 = url_output(link)\n",
    "    pdf_links = link_grabber(html1)\n",
    "    extension = ['.pdf']\n",
    "    pdf_links = links_of_interest(pdf_links,extension)\n",
    "    for pdf_link in pdf_links:\n",
    "        pdf_grabber(pdf_link,path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sustained Case PDFs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "218"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## check to see if any pdfs are already there\n",
    "current_pdf_list = len(os.listdir(path))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "primary_url = 'http://www.iprachicago.org/news-publications/case-reports/sustained-case-reports/'\n",
    "out = url_output(primary_url)\n",
    "pdf_links = link_grabber(out)\n",
    "extension = ['.pdf']\n",
    "pdf_links = links_of_interest(pdf_links,extension)\n",
    "for pdf_link in pdf_links:\n",
    "        pdf_grabber(pdf_link,path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "106\n",
      "105\n"
     ]
    }
   ],
   "source": [
    "## check to see if any pdfs are already there\n",
    "print(len(pdf_links))\n",
    "print(len(os.listdir(path)) - current_pdf_list)"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [civis-model]",
   "language": "python",
   "name": "Python [civis-model]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
